Ejercicio 1
Cliente (idCliente, nombre, apellido, DNI, telefono, direccion)
Factura (nroTicket, total, fecha, hora, idCliente (fk))
Detalle ( (nroTicket (fk), idProducto (fk)) , cantidad, preciounitario)
Producto (idProducto, nombreP, descripcion, precio, stock)

1. Listar datos personales de clientes cuyo apellido comience con el string ‘Pe’. Ordenar por DNI
=>
SELECT *
FROM Cliente
WHERE (apellido='Pe%')

2. Listar nombre, apellido, DNI, teléfono y dirección de clientes que realizaron compras solamente
durante 2017.
=>
SELECT c.nombre, c.apellido, c.DNI, c.telefono, c.direccion
FROM Cliente c NATURAL JOIN Factura f
WHERE (f.fecha BETWEEN '1-1-2017' and '31-12-2017')

3. Listar nombre, descripción, precio y stock de productos vendidos al cliente con DNI 45789456,
pero que no fueron vendidos a clientes de apellido ‘Garcia’.
=>
SELECT DISTINCT p.nombreP, p.descripcion, p.precio, p.stock
FROM Cliente c INNER JOIN Factura f ON(c.idCliente = f.idCliente) 
		INNER JOIN Detalle d ON(f.nroTicket = d.nroTicket)
		INNER JOIN Producto p (d.idProducto = p.idProducto)
WHERE (c.DNI='45789456')

4. Listar nombre, descripción, precio y stock de productos no vendidos a clientes que tengan
teléfono con característica 221 (la característica está al comienzo del teléfono). Ordenar por
nombre.
=>
SELECT DISTINCT p.nombreP, p.descripcion, p.precio, p.stock
FROM Producto p
WHERE p.idProducto NOT IN (SELECT p.idProducto
			FROM Cliente c NATURAL JOIN Factura f
					NATURAL JOIN Detalle d
					NATURAL JOIN Producto p
			WHERE (c.telefono='221%')
			)
ORDER BY p.nombreP

5. Listar para cada producto nombre, descripción, precio y cuantas veces fue vendido. Tenga en
cuenta que puede no haberse vendido nunca el producto.
=> CONSULTAR ======>
SELECT p.nombre, p.descripcion, p.precio, SUM(p.cantidad)
FROM Detalle d RIGHT JOIN Producto p ON(d.idProducto = p.idProducto)
GROUP BY d.idProducto, p.nombre, p.descripcion, p.precio

6. Listar nombre, apellido, DNI, teléfono y dirección de clientes que compraron los productos con
nombre ‘prod1’ y ‘prod2’ pero nunca compraron el producto con nombre ‘prod3’.
=> CONSULTAR =======>
SELECT nombre, apellido, DNI, telefono, direccion
FROM Cliente c INNER JOIN Factura f ON(c.idCliente = f.idCliente)
		INNER JOIN Detalle d ON(f.nroTicket = d.nroTicket)
		INNER JOIN Producto p ON(t.idProducto = p.idProducto)
WHERE (p.nombreP = 'prod1' OR p.nombreP = 'prod2' OR p.nombreP = 'prod3')

EXCEPT (
SELECT nombre, apellido, DNI, telefono, direccion
FROM Cliente c INNER JOIN Factura f ON(c.idCliente = f.idCliente)
		INNER JOIN Detalle d ON(f.nroTicket = d.nroTicket)
		INNER JOIN Ticket t ON(d.idProducto = t.idProducto)
WHERE p.nombreP = 'prod3'
)

7. Listar nroTicket, total, fecha, hora y DNI del cliente, de aquellas facturas donde se haya
comprado el producto ‘prod38’ o la factura tenga fecha de 2019.
=>
SELECT f.nroTicket, f.total, f.fecha, f.hora, c.DNI
FROM Cliente c 
		INNER JOIN Factura f ON (c.idCliente = f.idCliente)
		INNER JOIN Detalle d ON (f.nroTicket = d.nroTicket)
		INNER JOIN Producto p ON (f.idProducto = p.idProducto)
WHERE (p.nombreP = 'prod38' OR f.fecha BETWEEN '1/1/2019' AND '12/31/2019')

8. Agregar un cliente con los siguientes datos: nombre:’Jorge Luis’, apellido:’Castor’, DNI:
40578999, teléfono: ‘221-4400789’, dirección:’11 entre 500 y 501 nro:2587’ y el id de cliente:
500002. Se supone que el idCliente 500002 no existe.
=>
INSERT INTO Cliente (idCliente, nombre, apellido, DNI, telefono, direccion) VALUES (’Jorge Luis’, ’Castor’, 40578999, ‘221-4400789’, ’11 entre 500 y 501 nro:2587’, 500002)

9. Listar nroTicket, total, fecha, hora para las facturas del cliente ´Jorge Pérez´ donde no haya
comprado el producto ´Z´.
=>
SELECT nroTicket, total, fecha, hora
FROM Cliente c
	INNER JOIN Factura f ON (c.idCliente = f.idCliente)
	INNER JOIN Detalle d ON (f.nroTicket = d.nroTicket)
	INNER JOIN Producto p ON (d.idProducto = p.idProducto)
WHERE c.nombre = "Jorge" AND c.apellido = "Perez
AND NOT EXISTS (
SELECT p.idProducto
FROM p
WHERE p.nombreP = 'Z'
)

10. Listar DNI, apellido y nombre de clientes donde el monto total comprado, teniendo en cuenta
todas sus facturas, supere $10.000.000.
=>
SELECT DNI, apellido, nombre, SUM(total) as Suma Total
FROM Cliente c
INNER JOIN Factura f ON (c.idCliente = f.idCliente)
GROUP BY f.idCliente, DNI, apellido
HAVING SUM(total) > 10.000.000